/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  HighchartsModel,
} from './components/helpers/chart/options';
import {
  LocationSegments,
  MatchResults,
  RouterHistory,
} from '@stencil/router';
import {
  Load,
} from './components/docs/loadDependencies';

export namespace Components {
  interface CopyWrap {
    'align': string;
    'full': boolean;
  }
  interface HorizontalScroll {}
  interface SkeletonImg {
    'block': boolean;
    'height': number;
    'icon': boolean;
    'loading': boolean;
    'width': number;
  }
  interface SkeletonText {
    'as': string|'h1'|'h2'|'h3'|'h4'|'h5'|'h6'|'p';
    'loading': boolean;
    'width': number;
  }
  interface Stellar360Image {
    'height': number;
    'nolazyload': boolean;
    'poster': string;
    'src': string;
    'width': number;
  }
  interface Stellar360Video {
    'height': number;
    'poster': string;
    'src': string;
    'width': number;
  }
  interface StellarAccordion {
    'dark': boolean;
    'label': string;
    'name': string;
    'open': boolean;
    'refresh': () => Promise<void>;
    'tight': boolean;
  }
  interface StellarAnimateText {
    'delay': number;
    'duration': number;
    'in': () => Promise<void>;
    'method': string;
    'onlyIn': boolean;
    'out': () => Promise<void>;
    'phrase': boolean;
    'words': boolean;
  }
  interface StellarAsset {
    'align': string;
    'ariaLabel': string;
    'block': boolean;
    'language': string;
    'name': string;
    'src': string;
  }
  interface StellarAssetLibrary {}
  interface StellarAutoScroll {
    'autoplay': boolean;
    'loop': boolean;
    'play': () => Promise<void>;
    'speed': number;
    'startPosition': number;
    'stop': () => Promise<void>;
  }
  interface StellarAvatar {
    'color': string;
    'dark': boolean;
    'initials': string;
    'name': string;
    'notooltip': boolean;
    'processing': boolean;
    'shape': "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size': "tiny"|"small"|"medium"|"large";
    'src': string;
  }
  interface StellarBlur {
    'horizontal': number;
    'setBlurFilter': () => Promise<void>;
    'vertical': number;
  }
  interface StellarBreadcrumb {
    'color': string;
    'dark': boolean;
    'disabled': boolean;
    'first': boolean;
    'href': string;
    'label': string;
    'last': boolean;
    'tag': "link"|"route";
    'target': string;
  }
  interface StellarBreadcrumbs {
    'color': string;
    'dark': boolean;
    'description': string;
    'home': string;
    'icon': string;
    'icon_size': number;
    'icon_src': string;
    'label': string;
    'size': "tiny"|"small"|"medium"|"large";
    'tag': "link"|"route";
  }
  interface StellarButton {
    /**
    * Sets the button or link as an active state.
    */
    'active': boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'contrast': boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    'ghost': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href': string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert': boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label': string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name': string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline': boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': "tiny"|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'pjax': boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable': boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size': "tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag': "button"|"submit"|"link"|"span"|"route-link"|"pjax";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target': string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value': string;
  }
  interface StellarCallout {
    'dark': boolean;
    'type': "alert"|"error"|"info"|"success"|"default";
  }
  interface StellarCard {
    'dark': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flipIcon': string;
    /**
    * Let's a card be flippable
    */
    'flipReady': boolean;
    'flip_card': (e?: UIEvent) => Promise<void>;
    /**
    * Let's a card be flippable
    */
    'flippable': boolean;
    /**
    * Renders a flipped card
    */
    'flipped': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for': string;
    /**
    * Sets the href if the card is a link.
    */
    'href': string;
    /**
    * Sets the name if the card is a button.
    */
    'name': string;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding': "none"|"tiny"|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow': "light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag': "stencil-route-link"|"a"|"button"|"div";
    /**
    * Sets the type on a button
    */
    'type': string;
    /**
    * Sets the value if the card is a button.
    */
    'value': string;
  }
  interface StellarChart {
    'config': HighchartsModel;
    'dark': boolean;
    'for': string;
    'get_options': () => Promise<any>;
    'options': (newOptions: any) => Promise<void>;
    'refresh': () => Promise<void>;
    'remote': string;
    'type': "area"|"areaspline"|"bar"|"bubble"|"column"|"line"|"pie"|"polygon"|"scatter"|"spline"|"waterfall";
  }
  interface StellarClock {
    'animated': boolean;
    'between': string|Date;
    'size': number;
    'time': string|Date;
  }
  interface StellarCode {
    'clipboard': () => Promise<void>;
    'codeString': string;
    'copy': boolean;
    'dark': boolean;
    'expandable': boolean;
    'expanded': boolean;
    'feature': boolean;
    'highlight': () => Promise<void>;
    'language': string;
    'preview': boolean;
    'result': () => Promise<string>;
    'setCode': (code: any) => Promise<void>;
    'simple': boolean;
  }
  interface StellarColorLibrary {
    'colors': string;
    'shape': string;
  }
  interface StellarColorPicker {
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'notransparent': boolean;
    'val': string;
  }
  interface StellarComment {
    'content': any;
    'dark': boolean;
    'name': any;
  }
  interface StellarComments {}
  interface StellarContent {
    'behavior': string;
    'for': string;
    'open': boolean;
  }
  interface StellarContext {
    'apikey': string;
    'time': boolean;
    'weather': boolean;
  }
  interface StellarDocsComponent {
    'loader': Load;
    'match': MatchResults;
    'ready': boolean;
  }
  interface StellarDocsHeader {
    'complement': string;
    'mark': string;
    'max': number;
    'package': any;
    'ready': boolean;
    'theme': string;
    'value': number;
  }
  interface StellarDocsHome {}
  interface StellarDocsNavigation {
    'collection': any;
    'documentation': any;
    'loader': any;
    'ready': any;
  }
  interface StellarDocsNotFound {}
  interface StellarDocsPage {
    'match': MatchResults;
  }
  interface StellarDocumentation {
    'collection_link': string;
    'coverage_link': string;
    'documentation_link': string;
    'package_link': string;
    'stats_link': string;
  }
  interface StellarDropdown {
    'dark': boolean;
    'icon': boolean;
    'iconName': string;
    'label': string;
    'open': boolean;
    'position': "left"|"center"|"right";
  }
  interface StellarFollow {
    'distance': number;
    'padding': number;
    'type': "scroll"|"cursor";
  }
  interface StellarForm {
    'acceptCharset': string;
    'action': string;
    'ajax': boolean;
    'autocomplete': string;
    'enctype': string;
    'method': string;
    'name': string;
    'novalidate': boolean;
    'refresh': () => Promise<void>;
    'register': (selectors: string[]) => Promise<void>;
    'state': () => Promise<{ els: any; json: any; results: FormResult[]; formData: any; valid: boolean; }>;
    'submit_form': () => Promise<void>;
    'target': string;
  }
  interface StellarGrid {
    'align': string;
    'cols': number|string;
    'compact': boolean;
    'noresponsive': boolean;
    'padding': boolean;
    'refresh': () => Promise<void>;
  }
  interface StellarGroup {
    'count': number;
    'overflow': boolean;
    'size': string;
  }
  interface StellarGroupOverflow {
    'count': number;
    'size': string;
  }
  interface StellarIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
    */
    'icon'?: any;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, stellar-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy': boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
    /**
    * Specifies the exact `src` of an SVG file to use.
    */
    'src'?: string;
  }
  interface StellarImage {
    'alt': string;
    'bg': string;
    'block': boolean;
    'height': number;
    'large': string;
    'medium': () => Promise<any>;
    'nozoom': boolean;
    'poster': string;
    'type': "background" | "picture";
    'width': number;
  }
  interface StellarInput {
    'accept': string;
    'autocomplete': "name"|"honorific-prefix"|"given-name"|"additional-name"|"family-name"|"honorific-suffix"|"nickname"|"username"|"current-password"|"new-password"|"one-time-code"|"organization-title"|"organization"|"street-address"|"address-line1"|"address-line2"|"address-line3"|"address-level4"|"address-level3"|"address-level2"|"address-level1"|"country"|"country-name"|"postal-code"|"cc-name"|"cc-given-name"|"cc-additional-name"|"cc-family-name"|"cc-number"|"cc-exp"|"cc-exp-month"|"cc-exp-year"|"cc-csc"|"cc-type"|"transaction-currency"|"transaction-amount"|"language"|"bday"|"bday-day"|"bday-month"|"bday-year"|"sex"|"url"|"photo";
    'autofocus': boolean;
    'capsLock': boolean;
    'color': string;
    'cols': number;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'dateType': "month"|"year"|"day";
    /**
    * The pre-set value to pass to the input element
    */
    'default': any;
    'description': string;
    'disabled': boolean;
    'droppable': boolean;
    'files': Array<any>;
    'focused': boolean;
    'getDatePicker': () => Promise<any>;
    'getId': () => Promise<string>;
    'getStrength': () => Promise<object>;
    'icon': boolean;
    'invalid': (message: string | boolean, valid?: boolean, level?: number) => Promise<void>;
    'label': string;
    'match': string;
    'max': number;
    'maxlength': number;
    'min': number;
    'multiple': boolean;
    'multipleFileCaption': string;
    /**
    * The name of the input element
    */
    'name': string;
    'novalidate': boolean;
    'placeholder': string;
    'readonly': boolean;
    'replace_placeholder': string;
    'required': boolean;
    /**
    * The pre-set value to pass to the input element
    */
    'requirements': boolean;
    'rows': number;
    'setStrength': (value: number) => Promise<void>;
    'showCapsLock': boolean;
    'size': string;
    'spellcheck': boolean;
    'step': number;
    'tokenField': any;
    'tooltip': string;
    /**
    * The kind of element that the Input should be rendered as
    */
    'type': string;
    'val': () => Promise<any>;
    'validate': () => Promise<FormResult>;
    'validates': string;
    /**
    * The pre-set value to pass to the input element
    */
    'value': any;
    'wrap': string;
  }
  interface StellarIntersection {
    'element': HTMLElement|string;
    'in': Function;
    'margin': string;
    'multiple': boolean;
    'out': Function;
  }
  interface StellarInterview {
    'aspectRatio': number;
    'color': string;
    'height': number;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'playing': boolean;
    'skipTo': (time: number) => Promise<void>;
    'src': string;
    'toggle': () => Promise<void>;
    'visualization': "circle"|"bars"|"wave"|"bars2";
    'width': number;
  }
  interface StellarInterviewLine {
    'complement': boolean;
    'in': number;
    'out': number;
  }
  interface StellarItem {
    'apply': (data: any) => Promise<void>;
    'danger': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'data': () => Promise<{ size: string; value: string; type: "button" | "a" | "stencil-route-link"; label: string; danger: boolean; slotted: string; }>;
    'fit': boolean;
    'focused': boolean;
    'history': RouterHistory;
    'href': string;
    'label': string;
    'location': LocationSegments;
    'multiple': boolean;
    'route': boolean;
    'selectTitle': boolean;
    'select_item': (state?: { selected: boolean; }) => Promise<void>;
    'selectable': boolean;
    'selected': boolean;
    'setFocus': () => Promise<void>;
    'simple': boolean;
    'size': string;
    'type': "a"|"button"|"stencil-route-link";
    'value': string;
    'valueLabel': string;
    'wrap': boolean;
  }
  interface StellarKeyframes {
    'frame': number;
    'height': number;
    'src': string;
    'width': number;
  }
  interface StellarLabel {
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'for': string;
    'size': string;
    'underneath': boolean;
  }
  interface StellarLayout {
    'align': "baseline"|"center"|"top"|"bottom";
    'content': "baseline"|"center"|"top"|"bottom";
    'hasNav': boolean;
    'height': "fill";
    'padding': "none"|"tiny"|"small"|"medium"|"large";
    'refresh': () => Promise<void>;
    'size': "tiny"|"small"|"medium"|"large"|"xlarge"|"full"|"flush";
    'type': string;
  }
  interface StellarLongShadow {
    'active': boolean;
    'delay': number;
    'direction': "top-left"|"top-right"|"bottom-left"|"bottom-right";
    'in': () => Promise<void>;
    'length': number;
    'out': () => Promise<void>;
    'timing': number;
  }
  interface StellarMarkdown {
    /**
    * Used to set
    * @type {string}
    * @memberof Markdown
    */
    'codeString': string;
    'editable': boolean;
    'flavor': "github"|"original"|"vanilla";
    /**
    * Used to reference an external markdown file
    * @type string
    * @memberof Markdown
    */
    'src': string;
  }
  interface StellarMessage {
    'closable': boolean;
    'dark': boolean;
    'name': string;
    'remember': boolean;
    'shown': boolean;
    'size': "full"|"default";
    'striped': boolean;
    'type': "alert"|"error"|"info"|"success";
  }
  interface StellarMouseTrail {
    'count': number;
    'speed': number;
    'threedee': boolean;
  }
  interface StellarPagination {
    'color': string;
    'current': number;
    'dark': boolean;
    'padding': number;
    /**
    * Public: Sets the max cap of pages you can skip through
    */
    'pages': number;
    'type': "full"|"compact";
    'url': any;
  }
  interface StellarParallax {
    'center': boolean;
    'horizontal': boolean;
  }
  interface StellarParallaxSection {
    'speed': number;
  }
  interface StellarPasswordRequirements {
    'for': string;
    'size': "tiny"|"small"|"large";
  }
  interface StellarPjax {
    'pjax': any;
  }
  interface StellarPlaylist {
    'artwork': boolean;
    'autoplay': boolean;
    'dark': boolean;
    'load': boolean;
    'loading': boolean;
    'name': string;
    'next': () => Promise<void>;
    'pause': () => Promise<void>;
    'play': (skipDefault?: boolean) => Promise<void>;
    'playing': boolean;
    'playlist': "show"|"hide";
    'prepare': (element: any) => Promise<void>;
    'previous': () => Promise<void>;
    'remember': boolean;
    'view': "playlist"|"art";
    'visualizationColor': string;
    'visualizationType': "bars"|"bars2"|"wave"|"circle";
  }
  interface StellarProgress {
    'blurable': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    /**
    * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
    */
    'editable': boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'indeterminate': boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'max': number;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'noease': boolean;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'rounded': boolean;
    /**
    * Sets the value of the progress bar
    */
    'secondary': number;
    /**
    * Renders if this element is slender or not
    */
    'slender': boolean;
    /**
    * Sets the value of the progress bar
    */
    'value': number;
  }
  interface StellarReveal {
    /**
    * How far the element moves in the animation (% of element width/height)
    */
    'animationDistance': string;
    /**
    * How long to delay the animation (ms)
    */
    'delay': number;
    /**
    * Direction the element moves when animating in
    */
    'direction': 'up' | 'down' | 'right' | 'left';
    /**
    * How long the animation runs (ms)
    */
    'duration': number;
    /**
    * How much of the element must be visible before it animates (% of element height)
    */
    'triggerDistance': string;
  }
  interface StellarRevealList {
    'active': boolean;
    'animation': "fadeIn"|"fadeInUp"|"fadeInDown";
    'delay': number;
    'in': () => Promise<void>;
    'out': () => Promise<void>;
    'outAnimation': "fadeOut"|"fadeOutUp"|"fadeOutDown";
    'timing': number;
  }
  interface StellarScatter {
    'colors': boolean;
    'float': boolean;
    'max': number;
    'min': number;
    'sizes': boolean;
  }
  interface StellarScrollZRoot {
    'cameraSpeed': number;
    'cameraZ': number;
    'initialOriginX': number;
    'initialOriginY': number;
    'itemZ': number;
    'scatter': () => Promise<void>;
    'scenePerspective': number;
  }
  interface StellarScrollZSection {}
  interface StellarSelect {
    'autoSelectFirst': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'default': any;
    'description': string;
    'fit': boolean;
    'focused': boolean;
    'footer': boolean;
    'inline': boolean;
    'label': string;
    'loading': boolean;
    'multiple': boolean;
    'name': string|boolean;
    'novalidate': boolean;
    'open': boolean;
    'option_elements': () => Promise<NodeListOf<any>>;
    'options': () => Promise<string[]>;
    'other': boolean;
    'overlay': boolean;
    'placeholder': string;
    'placeholderInverted': boolean;
    'processing': boolean;
    'required': boolean;
    'resize': boolean|"full";
    'size': "tiny"|"small"|"medium"|"large";
    'tooltip': string;
    'update_values': () => Promise<void>;
    'validate': () => Promise<FormResult>;
    'value': Array<string>|string;
    'valueLabel': string;
    'verbiage': string;
    'verbiageAn': boolean;
    'wrap': boolean;
  }
  interface StellarSimpleSlides {
    /**
    * Show or hide the pager
    */
    'padding': string;
    /**
    * Show or hide the pager
    */
    'pager': boolean;
  }
  interface StellarSlide {
    'slideId': number;
    'width': string;
  }
  interface StellarSlides {
    'autoHeight': boolean;
    'blurring': boolean;
    'centeredSlides': boolean;
    'direction': "horizontal"|"vertical";
    'effect': "slide"|"fade"|"cube"|"coverflow"|"flip";
    /**
    * Get the index of the active slide.
    */
    'getActiveIndex': () => Promise<number>;
    /**
    * Get the index of the previous slide.
    */
    'getPreviousIndex': () => Promise<number>;
    'initialSlide': number;
    'instance': () => Promise<any>;
    /**
    * Get whether or not the current slide is the first slide.
    */
    'isBeginning': () => Promise<boolean>;
    /**
    * Get whether or not the current slide is the last slide.
    */
    'isEnd': () => Promise<boolean>;
    /**
    * Get the total number of slides.
    */
    'length': () => Promise<number>;
    /**
    * Lock or unlock the ability to slide to the next slides.
    */
    'lockSwipeToNext': (shouldLockSwipeToNext: boolean) => Promise<any>;
    /**
    * Lock or unlock the ability to slide to the previous slides.
    */
    'lockSwipeToPrev': (shouldLockSwipeToPrev: boolean) => Promise<any>;
    /**
    * Lock or unlock the ability to slide to change slides.
    */
    'lockSwipes': (shouldLockSwipes: boolean) => Promise<any>;
    'loop': boolean;
    'nested': boolean;
    /**
    * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
    */
    'options': any;
    /**
    * Show or hide the pager
    */
    'pager': boolean;
    'pagination': boolean;
    /**
    * Transition to the next slide.
    */
    'slideNext': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the previous slide.
    */
    'slidePrev': (speed?: number, runCallbacks?: boolean) => Promise<void>;
    /**
    * Transition to the specified slide.
    */
    'slideTo': (index: number, speed?: number, runCallbacks?: boolean) => Promise<void>;
    'slidesPerView': number;
    'spaceBetween': number;
    'speed': number;
    /**
    * Start auto play.
    */
    'startAutoplay': () => Promise<void>;
    /**
    * Stop auto play.
    */
    'stopAutoplay': () => Promise<void>;
    /**
    * Update the underlying slider implementation. Call this if you've added or removed child slides.
    */
    'update': () => Promise<void>;
    'watchSlidesProgress': boolean;
    'watchSlidesVisibility': boolean;
  }
  interface StellarSong {
    'artwork': boolean;
    'details': () => Promise<{ 'title': string; 'album': string; 'genre': string; 'artist': string; 'picture': string; }>;
    'getIndex': () => Promise<number>;
    'load': () => Promise<void>;
    'play': () => Promise<void>;
    'playing': boolean;
    'preload': () => Promise<void>;
    'setIndex': (value: any) => Promise<void>;
    'src': string;
    'switching': () => Promise<void>;
  }
  interface StellarStarscape {}
  interface StellarStep {
    'disabled': boolean;
    'href': string;
    'open': boolean;
    'order': number;
    'tabCount': number;
  }
  interface StellarSteps {
    'contents': () => Promise<any[]>;
    'name': string;
    'steps': () => Promise<any[]>;
  }
  interface StellarStory {
    'target': string;
  }
  interface StellarStripe {
    'connect': () => Promise<void>;
    'getToken': () => Promise<boolean>;
    'name': string;
    'setError': (error: string) => Promise<void>;
    'token': string;
  }
  interface StellarSwitch {
    'activate': () => Promise<void>;
    'checked': boolean;
    'checkedDefault': boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'name': string;
    'novalidate': boolean;
    'required': boolean;
    'validate': () => Promise<FormResult>;
  }
  interface StellarTab {
    'activate': () => Promise<void>;
    'dark': boolean;
    'disabled': boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href': string;
    'name': string;
    'notifications': boolean|number;
    'open': boolean;
    'order': number;
    'tabCount': number;
    'tag': "button"|"link"|"route-link"|"pjax";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target': string;
    'vertical': boolean;
  }
  interface StellarTable {
    'chart': boolean;
    'name': string;
    'striped': boolean;
    'upgrade': boolean;
  }
  interface StellarTabs {
    'behavior': string;
    'block': boolean;
    'blockIndicator': boolean;
    'blurring': () => Promise<void>;
    'contents': () => Promise<any[]>;
    'dark': boolean;
    'flipIndicator': boolean;
    'height': string;
    'name': string;
    'noanimation': boolean;
    'size': "tiny"|"small"|"medium"|"large";
    'tabs': () => Promise<any[]>;
    'vertical': boolean;
  }
  interface StellarTag {
    'color': string;
    'dark': boolean;
    'outline': boolean;
    'pill': boolean;
    'size': string;
    'textColor': string;
  }
  interface StellarTester {}
  interface StellarTheme {
    'base': string;
    'body': boolean;
    'complement': string;
    'dark': boolean;
    'light': boolean;
    'system': boolean;
  }
  interface StellarTime {
    'format': string;
    'relative': boolean;
    'value': string;
  }
  interface StellarToggle {
    'card': any;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'description': string;
    'flip': boolean;
    'label': string;
    'name': string;
    'novalidate': boolean;
    'required': boolean;
    'single': boolean;
    'size': string;
    'stacked': boolean;
    'type': string|"checkbox"|"radio"|"radio-block"|"checkbox-block";
    'validate': () => Promise<FormResult>;
    'value': string|string[];
  }
  interface StellarToggleOption {
    'checked': boolean;
    'checkedDefault': boolean;
    'confirm': () => Promise<void>;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark': boolean;
    'default': string;
    'disabled': boolean;
    'for': string;
    'icon': boolean;
    'inline': boolean;
    'name': string;
    'required': boolean;
    'selectedCopy': string;
    'single': boolean;
    'size': boolean;
    'tooltip': string;
    'type': string;
    'updateSelected': (value: boolean) => Promise<void>;
    'value': string;
  }
  interface StellarTooltip {
    'align': "left"|"center"|"right"|"middle-left"|"middle-center"|"middle-right"|"bottom-left"|"bottom-center"|"bottom-right";
    'dark': boolean;
    'focused': boolean;
  }
  interface StellarUnit {
    'decimals': number;
    'from': string;
    'money': boolean;
    'round': boolean;
    'to': string;
    'value': number;
  }
  interface StellarVideo {
    'autoplay': boolean;
    'controls': boolean;
    'getDuration': () => Promise<number>;
    'height': number;
    'muted': boolean;
    'overlay': boolean;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'playing': boolean;
    'playsinline': boolean;
    'poster': string;
    'preload': string;
    'skipTo': (time: any) => Promise<void>;
    'stop': () => Promise<void>;
    'toggle': () => Promise<void>;
    'trackInView': boolean;
    'videoElement': () => Promise<HTMLVideoElement>;
    'width': number;
  }
  interface StellarVideoInterview {
    'aspectRatio': number;
    'color': string;
    'height': number;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'playing': boolean;
    'skipTo': (time: number) => Promise<void>;
    'src': string;
    'toggle': () => Promise<void>;
    'visualization': "circle" | "bars" | "wave" | "bars2";
    'width': number;
  }
  interface WebAudio {
    'autoplay': Boolean;
    'connect_the_world': () => Promise<boolean>;
    'get_context': () => Promise<AudioContext>;
    'is_prepared': () => Promise<Boolean>;
    'midi': Boolean;
    'name': string;
    'source': (name: any) => Promise<any>;
    'stop': () => Promise<void>;
  }
  interface WebAudioDebugger {
    'addHistory': (string: History) => Promise<void>;
    'count': number;
  }
  interface WebAudioEffect {
    'attachEffect': (context: any, source: any) => Promise<string>;
    'axis': string;
    'method': string;
    'midicontroller': number;
    'responds': string;
    'type': string;
    'use': string;
    'value': number;
  }
  interface WebAudioSequencer {
    'autoplay': boolean;
    'custom': Function;
    'name': string;
    'play': () => Promise<void>;
    'stop': () => Promise<void>;
    'taps': number;
    'tempo': number;
  }
  interface WebAudioSource {
    'assignBuffer': (webAudio: any, buffer: any) => Promise<void>;
    'effectsvolume': number;
    'gain': (place?: string) => Promise<GainNode>;
    'getBuffer': () => Promise<AudioBuffer>;
    'getDuration': () => Promise<number>;
    'inert': boolean;
    'midichannel': number;
    'midikey': number;
    'name': string;
    'pause': () => Promise<void>;
    'play': () => Promise<void>;
    'playing': boolean;
    'prepare': () => Promise<void>;
    'prepared': boolean;
    'skipTo': (time: any) => Promise<void>;
    'src': string;
    'stop': () => Promise<void>;
    'toggle': () => Promise<void>;
    'webAudio': () => Promise<HTMLElement>;
  }
  interface WebAudioVisualizer {
    '_color': any;
    'analyser': AnalyserNode;
    'color': string;
    'connect': (context: AudioContext, destination?: any) => Promise<this>;
    'for': string;
    'height': number;
    'renderer': AnalyserNode;
    'size': number;
    'smoothing': number;
    'type': string|"wave"|"bars"|"circle"|"bars2";
    'width': number;
  }
  interface WebAudioVisualizerShader {
    'type': string;
  }
}

declare global {


  interface HTMLCopyWrapElement extends Components.CopyWrap, HTMLStencilElement {}
  var HTMLCopyWrapElement: {
    prototype: HTMLCopyWrapElement;
    new (): HTMLCopyWrapElement;
  };

  interface HTMLHorizontalScrollElement extends Components.HorizontalScroll, HTMLStencilElement {}
  var HTMLHorizontalScrollElement: {
    prototype: HTMLHorizontalScrollElement;
    new (): HTMLHorizontalScrollElement;
  };

  interface HTMLSkeletonImgElement extends Components.SkeletonImg, HTMLStencilElement {}
  var HTMLSkeletonImgElement: {
    prototype: HTMLSkeletonImgElement;
    new (): HTMLSkeletonImgElement;
  };

  interface HTMLSkeletonTextElement extends Components.SkeletonText, HTMLStencilElement {}
  var HTMLSkeletonTextElement: {
    prototype: HTMLSkeletonTextElement;
    new (): HTMLSkeletonTextElement;
  };

  interface HTMLStellar360ImageElement extends Components.Stellar360Image, HTMLStencilElement {}
  var HTMLStellar360ImageElement: {
    prototype: HTMLStellar360ImageElement;
    new (): HTMLStellar360ImageElement;
  };

  interface HTMLStellar360VideoElement extends Components.Stellar360Video, HTMLStencilElement {}
  var HTMLStellar360VideoElement: {
    prototype: HTMLStellar360VideoElement;
    new (): HTMLStellar360VideoElement;
  };

  interface HTMLStellarAccordionElement extends Components.StellarAccordion, HTMLStencilElement {}
  var HTMLStellarAccordionElement: {
    prototype: HTMLStellarAccordionElement;
    new (): HTMLStellarAccordionElement;
  };

  interface HTMLStellarAnimateTextElement extends Components.StellarAnimateText, HTMLStencilElement {}
  var HTMLStellarAnimateTextElement: {
    prototype: HTMLStellarAnimateTextElement;
    new (): HTMLStellarAnimateTextElement;
  };

  interface HTMLStellarAssetElement extends Components.StellarAsset, HTMLStencilElement {}
  var HTMLStellarAssetElement: {
    prototype: HTMLStellarAssetElement;
    new (): HTMLStellarAssetElement;
  };

  interface HTMLStellarAssetLibraryElement extends Components.StellarAssetLibrary, HTMLStencilElement {}
  var HTMLStellarAssetLibraryElement: {
    prototype: HTMLStellarAssetLibraryElement;
    new (): HTMLStellarAssetLibraryElement;
  };

  interface HTMLStellarAutoScrollElement extends Components.StellarAutoScroll, HTMLStencilElement {}
  var HTMLStellarAutoScrollElement: {
    prototype: HTMLStellarAutoScrollElement;
    new (): HTMLStellarAutoScrollElement;
  };

  interface HTMLStellarAvatarElement extends Components.StellarAvatar, HTMLStencilElement {}
  var HTMLStellarAvatarElement: {
    prototype: HTMLStellarAvatarElement;
    new (): HTMLStellarAvatarElement;
  };

  interface HTMLStellarBlurElement extends Components.StellarBlur, HTMLStencilElement {}
  var HTMLStellarBlurElement: {
    prototype: HTMLStellarBlurElement;
    new (): HTMLStellarBlurElement;
  };

  interface HTMLStellarBreadcrumbElement extends Components.StellarBreadcrumb, HTMLStencilElement {}
  var HTMLStellarBreadcrumbElement: {
    prototype: HTMLStellarBreadcrumbElement;
    new (): HTMLStellarBreadcrumbElement;
  };

  interface HTMLStellarBreadcrumbsElement extends Components.StellarBreadcrumbs, HTMLStencilElement {}
  var HTMLStellarBreadcrumbsElement: {
    prototype: HTMLStellarBreadcrumbsElement;
    new (): HTMLStellarBreadcrumbsElement;
  };

  interface HTMLStellarButtonElement extends Components.StellarButton, HTMLStencilElement {}
  var HTMLStellarButtonElement: {
    prototype: HTMLStellarButtonElement;
    new (): HTMLStellarButtonElement;
  };

  interface HTMLStellarCalloutElement extends Components.StellarCallout, HTMLStencilElement {}
  var HTMLStellarCalloutElement: {
    prototype: HTMLStellarCalloutElement;
    new (): HTMLStellarCalloutElement;
  };

  interface HTMLStellarCardElement extends Components.StellarCard, HTMLStencilElement {}
  var HTMLStellarCardElement: {
    prototype: HTMLStellarCardElement;
    new (): HTMLStellarCardElement;
  };

  interface HTMLStellarChartElement extends Components.StellarChart, HTMLStencilElement {}
  var HTMLStellarChartElement: {
    prototype: HTMLStellarChartElement;
    new (): HTMLStellarChartElement;
  };

  interface HTMLStellarClockElement extends Components.StellarClock, HTMLStencilElement {}
  var HTMLStellarClockElement: {
    prototype: HTMLStellarClockElement;
    new (): HTMLStellarClockElement;
  };

  interface HTMLStellarCodeElement extends Components.StellarCode, HTMLStencilElement {}
  var HTMLStellarCodeElement: {
    prototype: HTMLStellarCodeElement;
    new (): HTMLStellarCodeElement;
  };

  interface HTMLStellarColorLibraryElement extends Components.StellarColorLibrary, HTMLStencilElement {}
  var HTMLStellarColorLibraryElement: {
    prototype: HTMLStellarColorLibraryElement;
    new (): HTMLStellarColorLibraryElement;
  };

  interface HTMLStellarColorPickerElement extends Components.StellarColorPicker, HTMLStencilElement {}
  var HTMLStellarColorPickerElement: {
    prototype: HTMLStellarColorPickerElement;
    new (): HTMLStellarColorPickerElement;
  };

  interface HTMLStellarCommentElement extends Components.StellarComment, HTMLStencilElement {}
  var HTMLStellarCommentElement: {
    prototype: HTMLStellarCommentElement;
    new (): HTMLStellarCommentElement;
  };

  interface HTMLStellarCommentsElement extends Components.StellarComments, HTMLStencilElement {}
  var HTMLStellarCommentsElement: {
    prototype: HTMLStellarCommentsElement;
    new (): HTMLStellarCommentsElement;
  };

  interface HTMLStellarContentElement extends Components.StellarContent, HTMLStencilElement {}
  var HTMLStellarContentElement: {
    prototype: HTMLStellarContentElement;
    new (): HTMLStellarContentElement;
  };

  interface HTMLStellarContextElement extends Components.StellarContext, HTMLStencilElement {}
  var HTMLStellarContextElement: {
    prototype: HTMLStellarContextElement;
    new (): HTMLStellarContextElement;
  };

  interface HTMLStellarDocsComponentElement extends Components.StellarDocsComponent, HTMLStencilElement {}
  var HTMLStellarDocsComponentElement: {
    prototype: HTMLStellarDocsComponentElement;
    new (): HTMLStellarDocsComponentElement;
  };

  interface HTMLStellarDocsHeaderElement extends Components.StellarDocsHeader, HTMLStencilElement {}
  var HTMLStellarDocsHeaderElement: {
    prototype: HTMLStellarDocsHeaderElement;
    new (): HTMLStellarDocsHeaderElement;
  };

  interface HTMLStellarDocsHomeElement extends Components.StellarDocsHome, HTMLStencilElement {}
  var HTMLStellarDocsHomeElement: {
    prototype: HTMLStellarDocsHomeElement;
    new (): HTMLStellarDocsHomeElement;
  };

  interface HTMLStellarDocsNavigationElement extends Components.StellarDocsNavigation, HTMLStencilElement {}
  var HTMLStellarDocsNavigationElement: {
    prototype: HTMLStellarDocsNavigationElement;
    new (): HTMLStellarDocsNavigationElement;
  };

  interface HTMLStellarDocsNotFoundElement extends Components.StellarDocsNotFound, HTMLStencilElement {}
  var HTMLStellarDocsNotFoundElement: {
    prototype: HTMLStellarDocsNotFoundElement;
    new (): HTMLStellarDocsNotFoundElement;
  };

  interface HTMLStellarDocsPageElement extends Components.StellarDocsPage, HTMLStencilElement {}
  var HTMLStellarDocsPageElement: {
    prototype: HTMLStellarDocsPageElement;
    new (): HTMLStellarDocsPageElement;
  };

  interface HTMLStellarDocumentationElement extends Components.StellarDocumentation, HTMLStencilElement {}
  var HTMLStellarDocumentationElement: {
    prototype: HTMLStellarDocumentationElement;
    new (): HTMLStellarDocumentationElement;
  };

  interface HTMLStellarDropdownElement extends Components.StellarDropdown, HTMLStencilElement {}
  var HTMLStellarDropdownElement: {
    prototype: HTMLStellarDropdownElement;
    new (): HTMLStellarDropdownElement;
  };

  interface HTMLStellarFollowElement extends Components.StellarFollow, HTMLStencilElement {}
  var HTMLStellarFollowElement: {
    prototype: HTMLStellarFollowElement;
    new (): HTMLStellarFollowElement;
  };

  interface HTMLStellarFormElement extends Components.StellarForm, HTMLStencilElement {}
  var HTMLStellarFormElement: {
    prototype: HTMLStellarFormElement;
    new (): HTMLStellarFormElement;
  };

  interface HTMLStellarGridElement extends Components.StellarGrid, HTMLStencilElement {}
  var HTMLStellarGridElement: {
    prototype: HTMLStellarGridElement;
    new (): HTMLStellarGridElement;
  };

  interface HTMLStellarGroupElement extends Components.StellarGroup, HTMLStencilElement {}
  var HTMLStellarGroupElement: {
    prototype: HTMLStellarGroupElement;
    new (): HTMLStellarGroupElement;
  };

  interface HTMLStellarGroupOverflowElement extends Components.StellarGroupOverflow, HTMLStencilElement {}
  var HTMLStellarGroupOverflowElement: {
    prototype: HTMLStellarGroupOverflowElement;
    new (): HTMLStellarGroupOverflowElement;
  };

  interface HTMLStellarIconElement extends Components.StellarIcon, HTMLStencilElement {}
  var HTMLStellarIconElement: {
    prototype: HTMLStellarIconElement;
    new (): HTMLStellarIconElement;
  };

  interface HTMLStellarImageElement extends Components.StellarImage, HTMLStencilElement {}
  var HTMLStellarImageElement: {
    prototype: HTMLStellarImageElement;
    new (): HTMLStellarImageElement;
  };

  interface HTMLStellarInputElement extends Components.StellarInput, HTMLStencilElement {}
  var HTMLStellarInputElement: {
    prototype: HTMLStellarInputElement;
    new (): HTMLStellarInputElement;
  };

  interface HTMLStellarIntersectionElement extends Components.StellarIntersection, HTMLStencilElement {}
  var HTMLStellarIntersectionElement: {
    prototype: HTMLStellarIntersectionElement;
    new (): HTMLStellarIntersectionElement;
  };

  interface HTMLStellarInterviewElement extends Components.StellarInterview, HTMLStencilElement {}
  var HTMLStellarInterviewElement: {
    prototype: HTMLStellarInterviewElement;
    new (): HTMLStellarInterviewElement;
  };

  interface HTMLStellarInterviewLineElement extends Components.StellarInterviewLine, HTMLStencilElement {}
  var HTMLStellarInterviewLineElement: {
    prototype: HTMLStellarInterviewLineElement;
    new (): HTMLStellarInterviewLineElement;
  };

  interface HTMLStellarItemElement extends Components.StellarItem, HTMLStencilElement {}
  var HTMLStellarItemElement: {
    prototype: HTMLStellarItemElement;
    new (): HTMLStellarItemElement;
  };

  interface HTMLStellarKeyframesElement extends Components.StellarKeyframes, HTMLStencilElement {}
  var HTMLStellarKeyframesElement: {
    prototype: HTMLStellarKeyframesElement;
    new (): HTMLStellarKeyframesElement;
  };

  interface HTMLStellarLabelElement extends Components.StellarLabel, HTMLStencilElement {}
  var HTMLStellarLabelElement: {
    prototype: HTMLStellarLabelElement;
    new (): HTMLStellarLabelElement;
  };

  interface HTMLStellarLayoutElement extends Components.StellarLayout, HTMLStencilElement {}
  var HTMLStellarLayoutElement: {
    prototype: HTMLStellarLayoutElement;
    new (): HTMLStellarLayoutElement;
  };

  interface HTMLStellarLongShadowElement extends Components.StellarLongShadow, HTMLStencilElement {}
  var HTMLStellarLongShadowElement: {
    prototype: HTMLStellarLongShadowElement;
    new (): HTMLStellarLongShadowElement;
  };

  interface HTMLStellarMarkdownElement extends Components.StellarMarkdown, HTMLStencilElement {}
  var HTMLStellarMarkdownElement: {
    prototype: HTMLStellarMarkdownElement;
    new (): HTMLStellarMarkdownElement;
  };

  interface HTMLStellarMessageElement extends Components.StellarMessage, HTMLStencilElement {}
  var HTMLStellarMessageElement: {
    prototype: HTMLStellarMessageElement;
    new (): HTMLStellarMessageElement;
  };

  interface HTMLStellarMouseTrailElement extends Components.StellarMouseTrail, HTMLStencilElement {}
  var HTMLStellarMouseTrailElement: {
    prototype: HTMLStellarMouseTrailElement;
    new (): HTMLStellarMouseTrailElement;
  };

  interface HTMLStellarPaginationElement extends Components.StellarPagination, HTMLStencilElement {}
  var HTMLStellarPaginationElement: {
    prototype: HTMLStellarPaginationElement;
    new (): HTMLStellarPaginationElement;
  };

  interface HTMLStellarParallaxElement extends Components.StellarParallax, HTMLStencilElement {}
  var HTMLStellarParallaxElement: {
    prototype: HTMLStellarParallaxElement;
    new (): HTMLStellarParallaxElement;
  };

  interface HTMLStellarParallaxSectionElement extends Components.StellarParallaxSection, HTMLStencilElement {}
  var HTMLStellarParallaxSectionElement: {
    prototype: HTMLStellarParallaxSectionElement;
    new (): HTMLStellarParallaxSectionElement;
  };

  interface HTMLStellarPasswordRequirementsElement extends Components.StellarPasswordRequirements, HTMLStencilElement {}
  var HTMLStellarPasswordRequirementsElement: {
    prototype: HTMLStellarPasswordRequirementsElement;
    new (): HTMLStellarPasswordRequirementsElement;
  };

  interface HTMLStellarPjaxElement extends Components.StellarPjax, HTMLStencilElement {}
  var HTMLStellarPjaxElement: {
    prototype: HTMLStellarPjaxElement;
    new (): HTMLStellarPjaxElement;
  };

  interface HTMLStellarPlaylistElement extends Components.StellarPlaylist, HTMLStencilElement {}
  var HTMLStellarPlaylistElement: {
    prototype: HTMLStellarPlaylistElement;
    new (): HTMLStellarPlaylistElement;
  };

  interface HTMLStellarProgressElement extends Components.StellarProgress, HTMLStencilElement {}
  var HTMLStellarProgressElement: {
    prototype: HTMLStellarProgressElement;
    new (): HTMLStellarProgressElement;
  };

  interface HTMLStellarRevealElement extends Components.StellarReveal, HTMLStencilElement {}
  var HTMLStellarRevealElement: {
    prototype: HTMLStellarRevealElement;
    new (): HTMLStellarRevealElement;
  };

  interface HTMLStellarRevealListElement extends Components.StellarRevealList, HTMLStencilElement {}
  var HTMLStellarRevealListElement: {
    prototype: HTMLStellarRevealListElement;
    new (): HTMLStellarRevealListElement;
  };

  interface HTMLStellarScatterElement extends Components.StellarScatter, HTMLStencilElement {}
  var HTMLStellarScatterElement: {
    prototype: HTMLStellarScatterElement;
    new (): HTMLStellarScatterElement;
  };

  interface HTMLStellarScrollZRootElement extends Components.StellarScrollZRoot, HTMLStencilElement {}
  var HTMLStellarScrollZRootElement: {
    prototype: HTMLStellarScrollZRootElement;
    new (): HTMLStellarScrollZRootElement;
  };

  interface HTMLStellarScrollZSectionElement extends Components.StellarScrollZSection, HTMLStencilElement {}
  var HTMLStellarScrollZSectionElement: {
    prototype: HTMLStellarScrollZSectionElement;
    new (): HTMLStellarScrollZSectionElement;
  };

  interface HTMLStellarSelectElement extends Components.StellarSelect, HTMLStencilElement {}
  var HTMLStellarSelectElement: {
    prototype: HTMLStellarSelectElement;
    new (): HTMLStellarSelectElement;
  };

  interface HTMLStellarSimpleSlidesElement extends Components.StellarSimpleSlides, HTMLStencilElement {}
  var HTMLStellarSimpleSlidesElement: {
    prototype: HTMLStellarSimpleSlidesElement;
    new (): HTMLStellarSimpleSlidesElement;
  };

  interface HTMLStellarSlideElement extends Components.StellarSlide, HTMLStencilElement {}
  var HTMLStellarSlideElement: {
    prototype: HTMLStellarSlideElement;
    new (): HTMLStellarSlideElement;
  };

  interface HTMLStellarSlidesElement extends Components.StellarSlides, HTMLStencilElement {}
  var HTMLStellarSlidesElement: {
    prototype: HTMLStellarSlidesElement;
    new (): HTMLStellarSlidesElement;
  };

  interface HTMLStellarSongElement extends Components.StellarSong, HTMLStencilElement {}
  var HTMLStellarSongElement: {
    prototype: HTMLStellarSongElement;
    new (): HTMLStellarSongElement;
  };

  interface HTMLStellarStarscapeElement extends Components.StellarStarscape, HTMLStencilElement {}
  var HTMLStellarStarscapeElement: {
    prototype: HTMLStellarStarscapeElement;
    new (): HTMLStellarStarscapeElement;
  };

  interface HTMLStellarStepElement extends Components.StellarStep, HTMLStencilElement {}
  var HTMLStellarStepElement: {
    prototype: HTMLStellarStepElement;
    new (): HTMLStellarStepElement;
  };

  interface HTMLStellarStepsElement extends Components.StellarSteps, HTMLStencilElement {}
  var HTMLStellarStepsElement: {
    prototype: HTMLStellarStepsElement;
    new (): HTMLStellarStepsElement;
  };

  interface HTMLStellarStoryElement extends Components.StellarStory, HTMLStencilElement {}
  var HTMLStellarStoryElement: {
    prototype: HTMLStellarStoryElement;
    new (): HTMLStellarStoryElement;
  };

  interface HTMLStellarStripeElement extends Components.StellarStripe, HTMLStencilElement {}
  var HTMLStellarStripeElement: {
    prototype: HTMLStellarStripeElement;
    new (): HTMLStellarStripeElement;
  };

  interface HTMLStellarSwitchElement extends Components.StellarSwitch, HTMLStencilElement {}
  var HTMLStellarSwitchElement: {
    prototype: HTMLStellarSwitchElement;
    new (): HTMLStellarSwitchElement;
  };

  interface HTMLStellarTabElement extends Components.StellarTab, HTMLStencilElement {}
  var HTMLStellarTabElement: {
    prototype: HTMLStellarTabElement;
    new (): HTMLStellarTabElement;
  };

  interface HTMLStellarTableElement extends Components.StellarTable, HTMLStencilElement {}
  var HTMLStellarTableElement: {
    prototype: HTMLStellarTableElement;
    new (): HTMLStellarTableElement;
  };

  interface HTMLStellarTabsElement extends Components.StellarTabs, HTMLStencilElement {}
  var HTMLStellarTabsElement: {
    prototype: HTMLStellarTabsElement;
    new (): HTMLStellarTabsElement;
  };

  interface HTMLStellarTagElement extends Components.StellarTag, HTMLStencilElement {}
  var HTMLStellarTagElement: {
    prototype: HTMLStellarTagElement;
    new (): HTMLStellarTagElement;
  };

  interface HTMLStellarTesterElement extends Components.StellarTester, HTMLStencilElement {}
  var HTMLStellarTesterElement: {
    prototype: HTMLStellarTesterElement;
    new (): HTMLStellarTesterElement;
  };

  interface HTMLStellarThemeElement extends Components.StellarTheme, HTMLStencilElement {}
  var HTMLStellarThemeElement: {
    prototype: HTMLStellarThemeElement;
    new (): HTMLStellarThemeElement;
  };

  interface HTMLStellarTimeElement extends Components.StellarTime, HTMLStencilElement {}
  var HTMLStellarTimeElement: {
    prototype: HTMLStellarTimeElement;
    new (): HTMLStellarTimeElement;
  };

  interface HTMLStellarToggleElement extends Components.StellarToggle, HTMLStencilElement {}
  var HTMLStellarToggleElement: {
    prototype: HTMLStellarToggleElement;
    new (): HTMLStellarToggleElement;
  };

  interface HTMLStellarToggleOptionElement extends Components.StellarToggleOption, HTMLStencilElement {}
  var HTMLStellarToggleOptionElement: {
    prototype: HTMLStellarToggleOptionElement;
    new (): HTMLStellarToggleOptionElement;
  };

  interface HTMLStellarTooltipElement extends Components.StellarTooltip, HTMLStencilElement {}
  var HTMLStellarTooltipElement: {
    prototype: HTMLStellarTooltipElement;
    new (): HTMLStellarTooltipElement;
  };

  interface HTMLStellarUnitElement extends Components.StellarUnit, HTMLStencilElement {}
  var HTMLStellarUnitElement: {
    prototype: HTMLStellarUnitElement;
    new (): HTMLStellarUnitElement;
  };

  interface HTMLStellarVideoElement extends Components.StellarVideo, HTMLStencilElement {}
  var HTMLStellarVideoElement: {
    prototype: HTMLStellarVideoElement;
    new (): HTMLStellarVideoElement;
  };

  interface HTMLStellarVideoInterviewElement extends Components.StellarVideoInterview, HTMLStencilElement {}
  var HTMLStellarVideoInterviewElement: {
    prototype: HTMLStellarVideoInterviewElement;
    new (): HTMLStellarVideoInterviewElement;
  };

  interface HTMLWebAudioElement extends Components.WebAudio, HTMLStencilElement {}
  var HTMLWebAudioElement: {
    prototype: HTMLWebAudioElement;
    new (): HTMLWebAudioElement;
  };

  interface HTMLWebAudioDebuggerElement extends Components.WebAudioDebugger, HTMLStencilElement {}
  var HTMLWebAudioDebuggerElement: {
    prototype: HTMLWebAudioDebuggerElement;
    new (): HTMLWebAudioDebuggerElement;
  };

  interface HTMLWebAudioEffectElement extends Components.WebAudioEffect, HTMLStencilElement {}
  var HTMLWebAudioEffectElement: {
    prototype: HTMLWebAudioEffectElement;
    new (): HTMLWebAudioEffectElement;
  };

  interface HTMLWebAudioSequencerElement extends Components.WebAudioSequencer, HTMLStencilElement {}
  var HTMLWebAudioSequencerElement: {
    prototype: HTMLWebAudioSequencerElement;
    new (): HTMLWebAudioSequencerElement;
  };

  interface HTMLWebAudioSourceElement extends Components.WebAudioSource, HTMLStencilElement {}
  var HTMLWebAudioSourceElement: {
    prototype: HTMLWebAudioSourceElement;
    new (): HTMLWebAudioSourceElement;
  };

  interface HTMLWebAudioVisualizerElement extends Components.WebAudioVisualizer, HTMLStencilElement {}
  var HTMLWebAudioVisualizerElement: {
    prototype: HTMLWebAudioVisualizerElement;
    new (): HTMLWebAudioVisualizerElement;
  };

  interface HTMLWebAudioVisualizerShaderElement extends Components.WebAudioVisualizerShader, HTMLStencilElement {}
  var HTMLWebAudioVisualizerShaderElement: {
    prototype: HTMLWebAudioVisualizerShaderElement;
    new (): HTMLWebAudioVisualizerShaderElement;
  };
  interface HTMLElementTagNameMap {
    'copy-wrap': HTMLCopyWrapElement;
    'horizontal-scroll': HTMLHorizontalScrollElement;
    'skeleton-img': HTMLSkeletonImgElement;
    'skeleton-text': HTMLSkeletonTextElement;
    'stellar-360-image': HTMLStellar360ImageElement;
    'stellar-360-video': HTMLStellar360VideoElement;
    'stellar-accordion': HTMLStellarAccordionElement;
    'stellar-animate-text': HTMLStellarAnimateTextElement;
    'stellar-asset': HTMLStellarAssetElement;
    'stellar-asset-library': HTMLStellarAssetLibraryElement;
    'stellar-auto-scroll': HTMLStellarAutoScrollElement;
    'stellar-avatar': HTMLStellarAvatarElement;
    'stellar-blur': HTMLStellarBlurElement;
    'stellar-breadcrumb': HTMLStellarBreadcrumbElement;
    'stellar-breadcrumbs': HTMLStellarBreadcrumbsElement;
    'stellar-button': HTMLStellarButtonElement;
    'stellar-callout': HTMLStellarCalloutElement;
    'stellar-card': HTMLStellarCardElement;
    'stellar-chart': HTMLStellarChartElement;
    'stellar-clock': HTMLStellarClockElement;
    'stellar-code': HTMLStellarCodeElement;
    'stellar-color-library': HTMLStellarColorLibraryElement;
    'stellar-color-picker': HTMLStellarColorPickerElement;
    'stellar-comment': HTMLStellarCommentElement;
    'stellar-comments': HTMLStellarCommentsElement;
    'stellar-content': HTMLStellarContentElement;
    'stellar-context': HTMLStellarContextElement;
    'stellar-docs-component': HTMLStellarDocsComponentElement;
    'stellar-docs-header': HTMLStellarDocsHeaderElement;
    'stellar-docs-home': HTMLStellarDocsHomeElement;
    'stellar-docs-navigation': HTMLStellarDocsNavigationElement;
    'stellar-docs-not-found': HTMLStellarDocsNotFoundElement;
    'stellar-docs-page': HTMLStellarDocsPageElement;
    'stellar-documentation': HTMLStellarDocumentationElement;
    'stellar-dropdown': HTMLStellarDropdownElement;
    'stellar-follow': HTMLStellarFollowElement;
    'stellar-form': HTMLStellarFormElement;
    'stellar-grid': HTMLStellarGridElement;
    'stellar-group': HTMLStellarGroupElement;
    'stellar-group-overflow': HTMLStellarGroupOverflowElement;
    'stellar-icon': HTMLStellarIconElement;
    'stellar-image': HTMLStellarImageElement;
    'stellar-input': HTMLStellarInputElement;
    'stellar-intersection': HTMLStellarIntersectionElement;
    'stellar-interview': HTMLStellarInterviewElement;
    'stellar-interview-line': HTMLStellarInterviewLineElement;
    'stellar-item': HTMLStellarItemElement;
    'stellar-keyframes': HTMLStellarKeyframesElement;
    'stellar-label': HTMLStellarLabelElement;
    'stellar-layout': HTMLStellarLayoutElement;
    'stellar-long-shadow': HTMLStellarLongShadowElement;
    'stellar-markdown': HTMLStellarMarkdownElement;
    'stellar-message': HTMLStellarMessageElement;
    'stellar-mouse-trail': HTMLStellarMouseTrailElement;
    'stellar-pagination': HTMLStellarPaginationElement;
    'stellar-parallax': HTMLStellarParallaxElement;
    'stellar-parallax-section': HTMLStellarParallaxSectionElement;
    'stellar-password-requirements': HTMLStellarPasswordRequirementsElement;
    'stellar-pjax': HTMLStellarPjaxElement;
    'stellar-playlist': HTMLStellarPlaylistElement;
    'stellar-progress': HTMLStellarProgressElement;
    'stellar-reveal': HTMLStellarRevealElement;
    'stellar-reveal-list': HTMLStellarRevealListElement;
    'stellar-scatter': HTMLStellarScatterElement;
    'stellar-scroll-z-root': HTMLStellarScrollZRootElement;
    'stellar-scroll-z-section': HTMLStellarScrollZSectionElement;
    'stellar-select': HTMLStellarSelectElement;
    'stellar-simple-slides': HTMLStellarSimpleSlidesElement;
    'stellar-slide': HTMLStellarSlideElement;
    'stellar-slides': HTMLStellarSlidesElement;
    'stellar-song': HTMLStellarSongElement;
    'stellar-starscape': HTMLStellarStarscapeElement;
    'stellar-step': HTMLStellarStepElement;
    'stellar-steps': HTMLStellarStepsElement;
    'stellar-story': HTMLStellarStoryElement;
    'stellar-stripe': HTMLStellarStripeElement;
    'stellar-switch': HTMLStellarSwitchElement;
    'stellar-tab': HTMLStellarTabElement;
    'stellar-table': HTMLStellarTableElement;
    'stellar-tabs': HTMLStellarTabsElement;
    'stellar-tag': HTMLStellarTagElement;
    'stellar-tester': HTMLStellarTesterElement;
    'stellar-theme': HTMLStellarThemeElement;
    'stellar-time': HTMLStellarTimeElement;
    'stellar-toggle': HTMLStellarToggleElement;
    'stellar-toggle-option': HTMLStellarToggleOptionElement;
    'stellar-tooltip': HTMLStellarTooltipElement;
    'stellar-unit': HTMLStellarUnitElement;
    'stellar-video': HTMLStellarVideoElement;
    'stellar-video-interview': HTMLStellarVideoInterviewElement;
    'web-audio': HTMLWebAudioElement;
    'web-audio-debugger': HTMLWebAudioDebuggerElement;
    'web-audio-effect': HTMLWebAudioEffectElement;
    'web-audio-sequencer': HTMLWebAudioSequencerElement;
    'web-audio-source': HTMLWebAudioSourceElement;
    'web-audio-visualizer': HTMLWebAudioVisualizerElement;
    'web-audio-visualizer-shader': HTMLWebAudioVisualizerShaderElement;
  }
}

declare namespace LocalJSX {
  interface CopyWrap {
    'align'?: string;
    'full'?: boolean;
  }
  interface HorizontalScroll {}
  interface SkeletonImg {
    'block'?: boolean;
    'height'?: number;
    'icon'?: boolean;
    'loading'?: boolean;
    'width'?: number;
  }
  interface SkeletonText {
    'as'?: string|'h1'|'h2'|'h3'|'h4'|'h5'|'h6'|'p';
    'loading'?: boolean;
    'width'?: number;
  }
  interface Stellar360Image {
    'height'?: number;
    'nolazyload'?: boolean;
    'poster'?: string;
    'src'?: string;
    'width'?: number;
  }
  interface Stellar360Video {
    'height'?: number;
    'poster'?: string;
    'src'?: string;
    'width'?: number;
  }
  interface StellarAccordion {
    'dark'?: boolean;
    'label'?: string;
    'name'?: string;
    'open'?: boolean;
    'tight'?: boolean;
  }
  interface StellarAnimateText {
    'delay'?: number;
    'duration'?: number;
    'method'?: string;
    'onlyIn'?: boolean;
    'phrase'?: boolean;
    'words'?: boolean;
  }
  interface StellarAsset {
    'align'?: string;
    'ariaLabel'?: string;
    'block'?: boolean;
    'language'?: string;
    'name'?: string;
    'src'?: string;
  }
  interface StellarAssetLibrary {}
  interface StellarAutoScroll {
    'autoplay'?: boolean;
    'loop'?: boolean;
    'speed'?: number;
    'startPosition'?: number;
  }
  interface StellarAvatar {
    'color'?: string;
    'dark'?: boolean;
    'initials'?: string;
    'name'?: string;
    'notooltip'?: boolean;
    'processing'?: boolean;
    'shape'?: "circle"|"square"|"rectangle"|"diamond"|"hexagon"|"star"|"message";
    'size'?: "tiny"|"small"|"medium"|"large";
    'src'?: string;
  }
  interface StellarBlur {
    'horizontal'?: number;
    'vertical'?: number;
  }
  interface StellarBreadcrumb {
    'color'?: string;
    'dark'?: boolean;
    'disabled'?: boolean;
    'first'?: boolean;
    'href'?: string;
    'label'?: string;
    'last'?: boolean;
    'tag'?: "link"|"route";
    'target'?: string;
  }
  interface StellarBreadcrumbs {
    'color'?: string;
    'dark'?: boolean;
    'description'?: string;
    'home'?: string;
    'icon'?: string;
    'icon_size'?: number;
    'icon_src'?: string;
    'label'?: string;
    'size'?: "tiny"|"small"|"medium"|"large";
    'tag'?: "link"|"route";
  }
  interface StellarButton {
    /**
    * Sets the button or link as an active state.
    */
    'active'?: boolean;
    /**
    * Sets the button or link to render at full width to the parent.
    */
    'block'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'contrast'?: boolean;
    /**
    * Sets the button or link to provide the affordance of a dangerous action.
    */
    'danger'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    /**
    * Sets the button or link as disabled and not-interactable.
    */
    'disabled'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    'ghost'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href'?: string;
    /**
    * Sets the button or link as a button with only an icon.
    */
    'icon'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'invert'?: boolean;
    /**
    * Sets accessibility options on the buttons
    */
    'label'?: string;
    /**
    * Sets the name on the button if the button is an input. Allows the button to act as an item in a form.
    */
    'name'?: string;
    /**
    * Sets the button or link as an outlined button.
    */
    'outline'?: boolean;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: "tiny"|"small"|"medium"|"large";
    /**
    * Sets the button or link to render as a pill.
    */
    'pill'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'pjax'?: boolean;
    /**
    * Sets the button or link as processing when clicked.
    */
    'processable'?: boolean;
    /**
    * Sets the size of the button. Can be tiny, small, medium, or large.
    */
    'size'?: "tiny"|"small"|"medium"|"large";
    /**
    * Allows the button to render for different tags.
    */
    'tag'?: "button"|"submit"|"link"|"span"|"route-link"|"pjax";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target'?: string;
    /**
    * Sets the value on the button if the button is an input.
    */
    'value'?: string;
  }
  interface StellarCallout {
    'dark'?: boolean;
    'type'?: "alert"|"error"|"info"|"success"|"default";
  }
  interface StellarCard {
    'dark'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'flipIcon'?: string;
    /**
    * Let's a card be flippable
    */
    'flipReady'?: boolean;
    /**
    * Let's a card be flippable
    */
    'flippable'?: boolean;
    /**
    * Renders a flipped card
    */
    'flipped'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'for'?: string;
    /**
    * Sets the href if the card is a link.
    */
    'href'?: string;
    /**
    * Sets the name if the card is a button.
    */
    'name'?: string;
    'onFlip'?: (event: CustomEvent<any>) => void;
    /**
    * Sets the padding inside of the button. Can be small, medium, or large.
    */
    'padding'?: "none"|"tiny"|"small"|"medium"|"large";
    /**
    * Renders a shadow on the card
    */
    'shadow'?: "light"|"medium"|"heavy";
    /**
    * Sets the element to render the card as - an anchor tag, a button, or a div.
    */
    'tag'?: "stencil-route-link"|"a"|"button"|"div";
    /**
    * Sets the type on a button
    */
    'type'?: string;
    /**
    * Sets the value if the card is a button.
    */
    'value'?: string;
  }
  interface StellarChart {
    'config'?: HighchartsModel;
    'dark'?: boolean;
    'for'?: string;
    'remote'?: string;
    'type'?: "area"|"areaspline"|"bar"|"bubble"|"column"|"line"|"pie"|"polygon"|"scatter"|"spline"|"waterfall";
  }
  interface StellarClock {
    'animated'?: boolean;
    'between'?: string|Date;
    'size'?: number;
    'time'?: string|Date;
  }
  interface StellarCode {
    'codeString'?: string;
    'copy'?: boolean;
    'dark'?: boolean;
    'expandable'?: boolean;
    'expanded'?: boolean;
    'feature'?: boolean;
    'language'?: string;
    'preview'?: boolean;
    'simple'?: boolean;
  }
  interface StellarColorLibrary {
    'colors'?: string;
    'shape'?: string;
  }
  interface StellarColorPicker {
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'notransparent'?: boolean;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'val'?: string;
  }
  interface StellarComment {
    'content'?: any;
    'dark'?: boolean;
    'name'?: any;
  }
  interface StellarComments {}
  interface StellarContent {
    'behavior'?: string;
    'for'?: string;
    'open'?: boolean;
  }
  interface StellarContext {
    'apikey'?: string;
    'onTimeChange'?: (event: CustomEvent<any>) => void;
    'onWeatherChange'?: (event: CustomEvent<any>) => void;
    'time'?: boolean;
    'weather'?: boolean;
  }
  interface StellarDocsComponent {
    'loader'?: Load;
    'match'?: MatchResults;
    'ready'?: boolean;
  }
  interface StellarDocsHeader {
    'complement'?: string;
    'mark'?: string;
    'max'?: number;
    'package'?: any;
    'ready'?: boolean;
    'theme'?: string;
    'value'?: number;
  }
  interface StellarDocsHome {}
  interface StellarDocsNavigation {
    'collection'?: any;
    'documentation'?: any;
    'loader'?: any;
    'ready'?: any;
  }
  interface StellarDocsNotFound {}
  interface StellarDocsPage {
    'match'?: MatchResults;
  }
  interface StellarDocumentation {
    'collection_link'?: string;
    'coverage_link'?: string;
    'documentation_link'?: string;
    'package_link'?: string;
    'stats_link'?: string;
  }
  interface StellarDropdown {
    'dark'?: boolean;
    'icon'?: boolean;
    'iconName'?: string;
    'label'?: string;
    'open'?: boolean;
    'position'?: "left"|"center"|"right";
  }
  interface StellarFollow {
    'distance'?: number;
    'padding'?: number;
    'type'?: "scroll"|"cursor";
  }
  interface StellarForm {
    'acceptCharset'?: string;
    'action'?: string;
    'ajax'?: boolean;
    'autocomplete'?: string;
    'enctype'?: string;
    'method'?: string;
    'name'?: string;
    'novalidate'?: boolean;
    'onSubmitted'?: (event: CustomEvent<any>) => void;
    'target'?: string;
  }
  interface StellarGrid {
    'align'?: string;
    'cols'?: number|string;
    'compact'?: boolean;
    'noresponsive'?: boolean;
    'padding'?: boolean;
  }
  interface StellarGroup {
    'count'?: number;
    'overflow'?: boolean;
    'size'?: string;
  }
  interface StellarGroupOverflow {
    'count'?: number;
    'size'?: string;
  }
  interface StellarIcon {
    /**
    * Specifies the label to use for accessibility. Defaults to the icon name.
    */
    'ariaLabel'?: string;
    /**
    * Specifies whether the icon should horizontally flip when `dir` is `"rtl"`.
    */
    'flipRtl'?: boolean;
    /**
    * A combination of both `name` and `src`. If a `src` url is detected it will set the `src` property. Otherwise it assumes it's a built-in named SVG and set the `name` property.
    */
    'icon'?: any;
    /**
    * Specifies which icon to use on `ios` mode.
    */
    'ios'?: string;
    /**
    * If enabled, stellar-icon will be loaded lazily when it's visible in the viewport. Default, `false`.
    */
    'lazy'?: boolean;
    /**
    * Specifies which icon to use on `md` mode.
    */
    'md'?: string;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: "ios" | "md";
    /**
    * Specifies which icon to use from the built-in set of icons.
    */
    'name'?: string;
    /**
    * The size of the icon. Available options are: `"small"` and `"large"`.
    */
    'size'?: string;
    /**
    * Specifies the exact `src` of an SVG file to use.
    */
    'src'?: string;
  }
  interface StellarImage {
    'alt'?: string;
    'bg'?: string;
    'block'?: boolean;
    'height'?: number;
    'large'?: string;
    'nozoom'?: boolean;
    'poster'?: string;
    'type'?: "background" | "picture";
    'width'?: number;
  }
  interface StellarInput {
    'accept'?: string;
    'autocomplete'?: "name"|"honorific-prefix"|"given-name"|"additional-name"|"family-name"|"honorific-suffix"|"nickname"|"username"|"current-password"|"new-password"|"one-time-code"|"organization-title"|"organization"|"street-address"|"address-line1"|"address-line2"|"address-line3"|"address-level4"|"address-level3"|"address-level2"|"address-level1"|"country"|"country-name"|"postal-code"|"cc-name"|"cc-given-name"|"cc-additional-name"|"cc-family-name"|"cc-number"|"cc-exp"|"cc-exp-month"|"cc-exp-year"|"cc-csc"|"cc-type"|"transaction-currency"|"transaction-amount"|"language"|"bday"|"bday-day"|"bday-month"|"bday-year"|"sex"|"url"|"photo";
    'autofocus'?: boolean;
    'capsLock'?: boolean;
    'color'?: string;
    'cols'?: number;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'dateType'?: "month"|"year"|"day";
    /**
    * The pre-set value to pass to the input element
    */
    'default'?: any;
    'description'?: string;
    'disabled'?: boolean;
    'droppable'?: boolean;
    'files'?: Array<any>;
    'focused'?: boolean;
    'icon'?: boolean;
    'label'?: string;
    'match'?: string;
    'max'?: number;
    'maxlength'?: number;
    'min'?: number;
    'multiple'?: boolean;
    'multipleFileCaption'?: string;
    /**
    * The name of the input element
    */
    'name'?: string;
    'novalidate'?: boolean;
    /**
    * Public: Blur event
    */
    'onBluring'?: (event: CustomEvent<any>) => void;
    /**
    * Public: Focus event
    */
    'onFocusing'?: (event: CustomEvent<any>) => void;
    /**
    * Public: Updated event
    */
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'placeholder'?: string;
    'readonly'?: boolean;
    'replace_placeholder'?: string;
    'required'?: boolean;
    /**
    * The pre-set value to pass to the input element
    */
    'requirements'?: boolean;
    'rows'?: number;
    'showCapsLock'?: boolean;
    'size'?: string;
    'spellcheck'?: boolean;
    'step'?: number;
    'tokenField'?: any;
    'tooltip'?: string;
    /**
    * The kind of element that the Input should be rendered as
    */
    'type'?: string;
    'validates'?: string;
    /**
    * The pre-set value to pass to the input element
    */
    'value'?: any;
    'wrap'?: string;
  }
  interface StellarIntersection {
    'element'?: HTMLElement|string;
    'in'?: Function;
    'margin'?: string;
    'multiple'?: boolean;
    'out'?: Function;
  }
  interface StellarInterview {
    'aspectRatio'?: number;
    'color'?: string;
    'height'?: number;
    'playing'?: boolean;
    'src'?: string;
    'visualization'?: "circle"|"bars"|"wave"|"bars2";
    'width'?: number;
  }
  interface StellarInterviewLine {
    'complement'?: boolean;
    'in'?: number;
    'out'?: number;
  }
  interface StellarItem {
    'danger'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'fit'?: boolean;
    'focused'?: boolean;
    'history'?: RouterHistory;
    'href'?: string;
    'label'?: string;
    'location'?: LocationSegments;
    'multiple'?: boolean;
    'onBlurChanged'?: (event: CustomEvent<any>) => void;
    'onFocusChanged'?: (event: CustomEvent<any>) => void;
    'onMounted'?: (event: CustomEvent<any>) => void;
    'onSelectionChanged'?: (event: CustomEvent<any>) => void;
    'route'?: boolean;
    'selectTitle'?: boolean;
    'selectable'?: boolean;
    'selected'?: boolean;
    'simple'?: boolean;
    'size'?: string;
    'type'?: "a"|"button"|"stencil-route-link";
    'value'?: string;
    'valueLabel'?: string;
    'wrap'?: boolean;
  }
  interface StellarKeyframes {
    'frame'?: number;
    'height'?: number;
    'src'?: string;
    'width'?: number;
  }
  interface StellarLabel {
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'for'?: string;
    'size'?: string;
    'underneath'?: boolean;
  }
  interface StellarLayout {
    'align'?: "baseline"|"center"|"top"|"bottom";
    'content'?: "baseline"|"center"|"top"|"bottom";
    'hasNav'?: boolean;
    'height'?: "fill";
    'padding'?: "none"|"tiny"|"small"|"medium"|"large";
    'size'?: "tiny"|"small"|"medium"|"large"|"xlarge"|"full"|"flush";
    'type'?: string;
  }
  interface StellarLongShadow {
    'active'?: boolean;
    'delay'?: number;
    'direction'?: "top-left"|"top-right"|"bottom-left"|"bottom-right";
    'length'?: number;
    'timing'?: number;
  }
  interface StellarMarkdown {
    /**
    * Used to set
    * @type {string}
    * @memberof Markdown
    */
    'codeString'?: string;
    'editable'?: boolean;
    'flavor'?: "github"|"original"|"vanilla";
    /**
    * Used to reference an external markdown file
    * @type string
    * @memberof Markdown
    */
    'src'?: string;
  }
  interface StellarMessage {
    'closable'?: boolean;
    'dark'?: boolean;
    'name'?: string;
    'remember'?: boolean;
    'shown'?: boolean;
    'size'?: "full"|"default";
    'striped'?: boolean;
    'type'?: "alert"|"error"|"info"|"success";
  }
  interface StellarMouseTrail {
    'count'?: number;
    'speed'?: number;
    'threedee'?: boolean;
  }
  interface StellarPagination {
    'color'?: string;
    'current'?: number;
    'dark'?: boolean;
    'onChanged'?: (event: CustomEvent<any>) => void;
    'padding'?: number;
    /**
    * Public: Sets the max cap of pages you can skip through
    */
    'pages'?: number;
    'type'?: "full"|"compact";
    'url'?: any;
  }
  interface StellarParallax {
    'center'?: boolean;
    'horizontal'?: boolean;
  }
  interface StellarParallaxSection {
    'speed'?: number;
  }
  interface StellarPasswordRequirements {
    'for'?: string;
    'size'?: "tiny"|"small"|"large";
  }
  interface StellarPjax {
    'pjax'?: any;
  }
  interface StellarPlaylist {
    'artwork'?: boolean;
    'autoplay'?: boolean;
    'dark'?: boolean;
    'load'?: boolean;
    'loading'?: boolean;
    'name'?: string;
    'onLoad_songs'?: (event: CustomEvent<any>) => void;
    'playing'?: boolean;
    'playlist'?: "show"|"hide";
    'remember'?: boolean;
    'view'?: "playlist"|"art";
    'visualizationColor'?: string;
    'visualizationType'?: "bars"|"bars2"|"wave"|"circle";
  }
  interface StellarProgress {
    'blurable'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    /**
    * Allows the progress bar to be clicked on, to help the user to navigate through the progressing content.
    */
    'editable'?: boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'indeterminate'?: boolean;
    /**
    * Sets the maximum cap for steps in the progress bar
    */
    'max'?: number;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'noease'?: boolean;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    /**
    * eliminates the easing in the css so you can apply value updates without jitter.
    */
    'rounded'?: boolean;
    /**
    * Sets the value of the progress bar
    */
    'secondary'?: number;
    /**
    * Renders if this element is slender or not
    */
    'slender'?: boolean;
    /**
    * Sets the value of the progress bar
    */
    'value'?: number;
  }
  interface StellarReveal {
    /**
    * How far the element moves in the animation (% of element width/height)
    */
    'animationDistance'?: string;
    /**
    * How long to delay the animation (ms)
    */
    'delay'?: number;
    /**
    * Direction the element moves when animating in
    */
    'direction'?: 'up' | 'down' | 'right' | 'left';
    /**
    * How long the animation runs (ms)
    */
    'duration'?: number;
    /**
    * How much of the element must be visible before it animates (% of element height)
    */
    'triggerDistance'?: string;
  }
  interface StellarRevealList {
    'active'?: boolean;
    'animation'?: "fadeIn"|"fadeInUp"|"fadeInDown";
    'delay'?: number;
    'outAnimation'?: "fadeOut"|"fadeOutUp"|"fadeOutDown";
    'timing'?: number;
  }
  interface StellarScatter {
    'colors'?: boolean;
    'float'?: boolean;
    'max'?: number;
    'min'?: number;
    'sizes'?: boolean;
  }
  interface StellarScrollZRoot {
    'cameraSpeed'?: number;
    'cameraZ'?: number;
    'initialOriginX'?: number;
    'initialOriginY'?: number;
    'itemZ'?: number;
    'scenePerspective'?: number;
  }
  interface StellarScrollZSection {}
  interface StellarSelect {
    'autoSelectFirst'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'default'?: any;
    'description'?: string;
    'fit'?: boolean;
    'focused'?: boolean;
    'footer'?: boolean;
    'inline'?: boolean;
    'label'?: string;
    'loading'?: boolean;
    'multiple'?: boolean;
    'name'?: string|boolean;
    'novalidate'?: boolean;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
    'other'?: boolean;
    'overlay'?: boolean;
    'placeholder'?: string;
    'placeholderInverted'?: boolean;
    'processing'?: boolean;
    'required'?: boolean;
    'resize'?: boolean|"full";
    'size'?: "tiny"|"small"|"medium"|"large";
    'tooltip'?: string;
    'value'?: Array<string>|string;
    'valueLabel'?: string;
    'verbiage'?: string;
    'verbiageAn'?: boolean;
    'wrap'?: boolean;
  }
  interface StellarSimpleSlides {
    /**
    * Show or hide the pager
    */
    'padding'?: string;
    /**
    * Show or hide the pager
    */
    'pager'?: boolean;
  }
  interface StellarSlide {
    'onSwitched'?: (event: CustomEvent<any>) => void;
    'slideId'?: number;
    'width'?: string;
  }
  interface StellarSlides {
    'autoHeight'?: boolean;
    'blurring'?: boolean;
    'centeredSlides'?: boolean;
    'direction'?: "horizontal"|"vertical";
    'effect'?: "slide"|"fade"|"cube"|"coverflow"|"flip";
    'initialSlide'?: number;
    'loop'?: boolean;
    'nested'?: boolean;
    /**
    * Emitted after the active slide has changed.
    */
    'onIonSlideDidChange'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the slider is actively being moved.
    */
    'onIonSlideDrag'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the next slide has ended.
    */
    'onIonSlideNextEnd'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the next slide has started.
    */
    'onIonSlideNextStart'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the previous slide has ended.
    */
    'onIonSlidePrevEnd'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the previous slide has started.
    */
    'onIonSlidePrevStart'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the slider is at the last slide.
    */
    'onIonSlideReachEnd'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the slider is at its initial position.
    */
    'onIonSlideReachStart'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the user releases the touch.
    */
    'onIonSlideTouchEnd'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the user first touches the slider.
    */
    'onIonSlideTouchStart'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the slide transition has ended.
    */
    'onIonSlideTransitionEnd'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted when the slide transition has started.
    */
    'onIonSlideTransitionStart'?: (event: CustomEvent<any>) => void;
    /**
    * Emitted before the active slide has changed.
    */
    'onIonSlideWillChange'?: (event: CustomEvent<any>) => void;
    /**
    * Options to pass to the swiper instance. See http://idangero.us/swiper/api/ for valid options
    */
    'options'?: any;
    /**
    * Show or hide the pager
    */
    'pager'?: boolean;
    'pagination'?: boolean;
    'slidesPerView'?: number;
    'spaceBetween'?: number;
    'speed'?: number;
    'watchSlidesProgress'?: boolean;
    'watchSlidesVisibility'?: boolean;
  }
  interface StellarSong {
    'artwork'?: boolean;
    'onLoaded'?: (event: CustomEvent<any>) => void;
    'onSongChanged'?: (event: CustomEvent<any>) => void;
    'playing'?: boolean;
    'src'?: string;
  }
  interface StellarStarscape {}
  interface StellarStep {
    'disabled'?: boolean;
    'href'?: string;
    'onContentChange'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
    'order'?: number;
    'tabCount'?: number;
  }
  interface StellarSteps {
    'name'?: string;
  }
  interface StellarStory {
    'target'?: string;
  }
  interface StellarStripe {
    'name'?: string;
    'token'?: string;
  }
  interface StellarSwitch {
    'checked'?: boolean;
    'checkedDefault'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'name'?: string;
    'novalidate'?: boolean;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'required'?: boolean;
  }
  interface StellarTab {
    'dark'?: boolean;
    'disabled'?: boolean;
    /**
    * Sets the href on the anchor tag if the button is a link.
    */
    'href'?: string;
    'name'?: string;
    'notifications'?: boolean|number;
    'onContentChange'?: (event: CustomEvent<any>) => void;
    'open'?: boolean;
    'order'?: number;
    'tabCount'?: number;
    'tag'?: "button"|"link"|"route-link"|"pjax";
    /**
    * Sets the target on the anchor tag if the button is a link.
    */
    'target'?: string;
    'vertical'?: boolean;
  }
  interface StellarTable {
    'chart'?: boolean;
    'name'?: string;
    'striped'?: boolean;
    'upgrade'?: boolean;
  }
  interface StellarTabs {
    'behavior'?: string;
    'block'?: boolean;
    'blockIndicator'?: boolean;
    'dark'?: boolean;
    'flipIndicator'?: boolean;
    'height'?: string;
    'name'?: string;
    'noanimation'?: boolean;
    'size'?: "tiny"|"small"|"medium"|"large";
    'vertical'?: boolean;
  }
  interface StellarTag {
    'color'?: string;
    'dark'?: boolean;
    'outline'?: boolean;
    'pill'?: boolean;
    'size'?: string;
    'textColor'?: string;
  }
  interface StellarTester {}
  interface StellarTheme {
    'base'?: string;
    'body'?: boolean;
    'complement'?: string;
    'dark'?: boolean;
    'light'?: boolean;
    'system'?: boolean;
  }
  interface StellarTime {
    'format'?: string;
    'relative'?: boolean;
    'value'?: string;
  }
  interface StellarToggle {
    'card'?: any;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'description'?: string;
    'flip'?: boolean;
    'label'?: string;
    'name'?: string;
    'novalidate'?: boolean;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'required'?: boolean;
    'single'?: boolean;
    'size'?: string;
    'stacked'?: boolean;
    'type'?: string|"checkbox"|"radio"|"radio-block"|"checkbox-block";
    'value'?: string|string[];
  }
  interface StellarToggleOption {
    'checked'?: boolean;
    'checkedDefault'?: boolean;
    /**
    * Sets the button or link as an outlined button.
    */
    'dark'?: boolean;
    'default'?: string;
    'disabled'?: boolean;
    'for'?: string;
    'icon'?: boolean;
    'inline'?: boolean;
    'name'?: string;
    'onChangeToggle'?: (event: CustomEvent<any>) => void;
    'required'?: boolean;
    'selectedCopy'?: string;
    'single'?: boolean;
    'size'?: boolean;
    'tooltip'?: string;
    'type'?: string;
    'value'?: string;
  }
  interface StellarTooltip {
    'align'?: "left"|"center"|"right"|"middle-left"|"middle-center"|"middle-right"|"bottom-left"|"bottom-center"|"bottom-right";
    'dark'?: boolean;
    'focused'?: boolean;
  }
  interface StellarUnit {
    'decimals'?: number;
    'from'?: string;
    'money'?: boolean;
    'round'?: boolean;
    'to'?: string;
    'value'?: number;
  }
  interface StellarVideo {
    'autoplay'?: boolean;
    'controls'?: boolean;
    'height'?: number;
    'muted'?: boolean;
    'onLoaded'?: (event: CustomEvent<any>) => void;
    'onPaused'?: (event: CustomEvent<any>) => void;
    'onPlayed'?: (event: CustomEvent<any>) => void;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'overlay'?: boolean;
    'playing'?: boolean;
    'playsinline'?: boolean;
    'poster'?: string;
    'preload'?: string;
    'trackInView'?: boolean;
    'width'?: number;
  }
  interface StellarVideoInterview {
    'aspectRatio'?: number;
    'color'?: string;
    'height'?: number;
    'playing'?: boolean;
    'src'?: string;
    'visualization'?: "circle" | "bars" | "wave" | "bars2";
    'width'?: number;
  }
  interface WebAudio {
    'autoplay'?: Boolean;
    'midi'?: Boolean;
    'name'?: string;
  }
  interface WebAudioDebugger {
    'count'?: number;
  }
  interface WebAudioEffect {
    'axis'?: string;
    'method'?: string;
    'midicontroller'?: number;
    'responds'?: string;
    'type'?: string;
    'use'?: string;
    'value'?: number;
  }
  interface WebAudioSequencer {
    'autoplay'?: boolean;
    'custom'?: Function;
    'name'?: string;
    'taps'?: number;
    'tempo'?: number;
  }
  interface WebAudioSource {
    'effectsvolume'?: number;
    'inert'?: boolean;
    'midichannel'?: number;
    'midikey'?: number;
    'name'?: string;
    'onUpdate'?: (event: CustomEvent<any>) => void;
    'playing'?: boolean;
    'prepared'?: boolean;
    'src'?: string;
  }
  interface WebAudioVisualizer {
    '_color'?: any;
    'analyser'?: AnalyserNode;
    'color'?: string;
    'for'?: string;
    'height'?: number;
    'renderer'?: AnalyserNode;
    'size'?: number;
    'smoothing'?: number;
    'type'?: string|"wave"|"bars"|"circle"|"bars2";
    'width'?: number;
  }
  interface WebAudioVisualizerShader {
    'type'?: string;
  }

  interface IntrinsicElements {
    'copy-wrap': CopyWrap;
    'horizontal-scroll': HorizontalScroll;
    'skeleton-img': SkeletonImg;
    'skeleton-text': SkeletonText;
    'stellar-360-image': Stellar360Image;
    'stellar-360-video': Stellar360Video;
    'stellar-accordion': StellarAccordion;
    'stellar-animate-text': StellarAnimateText;
    'stellar-asset': StellarAsset;
    'stellar-asset-library': StellarAssetLibrary;
    'stellar-auto-scroll': StellarAutoScroll;
    'stellar-avatar': StellarAvatar;
    'stellar-blur': StellarBlur;
    'stellar-breadcrumb': StellarBreadcrumb;
    'stellar-breadcrumbs': StellarBreadcrumbs;
    'stellar-button': StellarButton;
    'stellar-callout': StellarCallout;
    'stellar-card': StellarCard;
    'stellar-chart': StellarChart;
    'stellar-clock': StellarClock;
    'stellar-code': StellarCode;
    'stellar-color-library': StellarColorLibrary;
    'stellar-color-picker': StellarColorPicker;
    'stellar-comment': StellarComment;
    'stellar-comments': StellarComments;
    'stellar-content': StellarContent;
    'stellar-context': StellarContext;
    'stellar-docs-component': StellarDocsComponent;
    'stellar-docs-header': StellarDocsHeader;
    'stellar-docs-home': StellarDocsHome;
    'stellar-docs-navigation': StellarDocsNavigation;
    'stellar-docs-not-found': StellarDocsNotFound;
    'stellar-docs-page': StellarDocsPage;
    'stellar-documentation': StellarDocumentation;
    'stellar-dropdown': StellarDropdown;
    'stellar-follow': StellarFollow;
    'stellar-form': StellarForm;
    'stellar-grid': StellarGrid;
    'stellar-group': StellarGroup;
    'stellar-group-overflow': StellarGroupOverflow;
    'stellar-icon': StellarIcon;
    'stellar-image': StellarImage;
    'stellar-input': StellarInput;
    'stellar-intersection': StellarIntersection;
    'stellar-interview': StellarInterview;
    'stellar-interview-line': StellarInterviewLine;
    'stellar-item': StellarItem;
    'stellar-keyframes': StellarKeyframes;
    'stellar-label': StellarLabel;
    'stellar-layout': StellarLayout;
    'stellar-long-shadow': StellarLongShadow;
    'stellar-markdown': StellarMarkdown;
    'stellar-message': StellarMessage;
    'stellar-mouse-trail': StellarMouseTrail;
    'stellar-pagination': StellarPagination;
    'stellar-parallax': StellarParallax;
    'stellar-parallax-section': StellarParallaxSection;
    'stellar-password-requirements': StellarPasswordRequirements;
    'stellar-pjax': StellarPjax;
    'stellar-playlist': StellarPlaylist;
    'stellar-progress': StellarProgress;
    'stellar-reveal': StellarReveal;
    'stellar-reveal-list': StellarRevealList;
    'stellar-scatter': StellarScatter;
    'stellar-scroll-z-root': StellarScrollZRoot;
    'stellar-scroll-z-section': StellarScrollZSection;
    'stellar-select': StellarSelect;
    'stellar-simple-slides': StellarSimpleSlides;
    'stellar-slide': StellarSlide;
    'stellar-slides': StellarSlides;
    'stellar-song': StellarSong;
    'stellar-starscape': StellarStarscape;
    'stellar-step': StellarStep;
    'stellar-steps': StellarSteps;
    'stellar-story': StellarStory;
    'stellar-stripe': StellarStripe;
    'stellar-switch': StellarSwitch;
    'stellar-tab': StellarTab;
    'stellar-table': StellarTable;
    'stellar-tabs': StellarTabs;
    'stellar-tag': StellarTag;
    'stellar-tester': StellarTester;
    'stellar-theme': StellarTheme;
    'stellar-time': StellarTime;
    'stellar-toggle': StellarToggle;
    'stellar-toggle-option': StellarToggleOption;
    'stellar-tooltip': StellarTooltip;
    'stellar-unit': StellarUnit;
    'stellar-video': StellarVideo;
    'stellar-video-interview': StellarVideoInterview;
    'web-audio': WebAudio;
    'web-audio-debugger': WebAudioDebugger;
    'web-audio-effect': WebAudioEffect;
    'web-audio-sequencer': WebAudioSequencer;
    'web-audio-source': WebAudioSource;
    'web-audio-visualizer': WebAudioVisualizer;
    'web-audio-visualizer-shader': WebAudioVisualizerShader;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'copy-wrap': LocalJSX.CopyWrap & JSXBase.HTMLAttributes<HTMLCopyWrapElement>;
      'horizontal-scroll': LocalJSX.HorizontalScroll & JSXBase.HTMLAttributes<HTMLHorizontalScrollElement>;
      'skeleton-img': LocalJSX.SkeletonImg & JSXBase.HTMLAttributes<HTMLSkeletonImgElement>;
      'skeleton-text': LocalJSX.SkeletonText & JSXBase.HTMLAttributes<HTMLSkeletonTextElement>;
      'stellar-360-image': LocalJSX.Stellar360Image & JSXBase.HTMLAttributes<HTMLStellar360ImageElement>;
      'stellar-360-video': LocalJSX.Stellar360Video & JSXBase.HTMLAttributes<HTMLStellar360VideoElement>;
      'stellar-accordion': LocalJSX.StellarAccordion & JSXBase.HTMLAttributes<HTMLStellarAccordionElement>;
      'stellar-animate-text': LocalJSX.StellarAnimateText & JSXBase.HTMLAttributes<HTMLStellarAnimateTextElement>;
      'stellar-asset': LocalJSX.StellarAsset & JSXBase.HTMLAttributes<HTMLStellarAssetElement>;
      'stellar-asset-library': LocalJSX.StellarAssetLibrary & JSXBase.HTMLAttributes<HTMLStellarAssetLibraryElement>;
      'stellar-auto-scroll': LocalJSX.StellarAutoScroll & JSXBase.HTMLAttributes<HTMLStellarAutoScrollElement>;
      'stellar-avatar': LocalJSX.StellarAvatar & JSXBase.HTMLAttributes<HTMLStellarAvatarElement>;
      'stellar-blur': LocalJSX.StellarBlur & JSXBase.HTMLAttributes<HTMLStellarBlurElement>;
      'stellar-breadcrumb': LocalJSX.StellarBreadcrumb & JSXBase.HTMLAttributes<HTMLStellarBreadcrumbElement>;
      'stellar-breadcrumbs': LocalJSX.StellarBreadcrumbs & JSXBase.HTMLAttributes<HTMLStellarBreadcrumbsElement>;
      'stellar-button': LocalJSX.StellarButton & JSXBase.HTMLAttributes<HTMLStellarButtonElement>;
      'stellar-callout': LocalJSX.StellarCallout & JSXBase.HTMLAttributes<HTMLStellarCalloutElement>;
      'stellar-card': LocalJSX.StellarCard & JSXBase.HTMLAttributes<HTMLStellarCardElement>;
      'stellar-chart': LocalJSX.StellarChart & JSXBase.HTMLAttributes<HTMLStellarChartElement>;
      'stellar-clock': LocalJSX.StellarClock & JSXBase.HTMLAttributes<HTMLStellarClockElement>;
      'stellar-code': LocalJSX.StellarCode & JSXBase.HTMLAttributes<HTMLStellarCodeElement>;
      'stellar-color-library': LocalJSX.StellarColorLibrary & JSXBase.HTMLAttributes<HTMLStellarColorLibraryElement>;
      'stellar-color-picker': LocalJSX.StellarColorPicker & JSXBase.HTMLAttributes<HTMLStellarColorPickerElement>;
      'stellar-comment': LocalJSX.StellarComment & JSXBase.HTMLAttributes<HTMLStellarCommentElement>;
      'stellar-comments': LocalJSX.StellarComments & JSXBase.HTMLAttributes<HTMLStellarCommentsElement>;
      'stellar-content': LocalJSX.StellarContent & JSXBase.HTMLAttributes<HTMLStellarContentElement>;
      'stellar-context': LocalJSX.StellarContext & JSXBase.HTMLAttributes<HTMLStellarContextElement>;
      'stellar-docs-component': LocalJSX.StellarDocsComponent & JSXBase.HTMLAttributes<HTMLStellarDocsComponentElement>;
      'stellar-docs-header': LocalJSX.StellarDocsHeader & JSXBase.HTMLAttributes<HTMLStellarDocsHeaderElement>;
      'stellar-docs-home': LocalJSX.StellarDocsHome & JSXBase.HTMLAttributes<HTMLStellarDocsHomeElement>;
      'stellar-docs-navigation': LocalJSX.StellarDocsNavigation & JSXBase.HTMLAttributes<HTMLStellarDocsNavigationElement>;
      'stellar-docs-not-found': LocalJSX.StellarDocsNotFound & JSXBase.HTMLAttributes<HTMLStellarDocsNotFoundElement>;
      'stellar-docs-page': LocalJSX.StellarDocsPage & JSXBase.HTMLAttributes<HTMLStellarDocsPageElement>;
      'stellar-documentation': LocalJSX.StellarDocumentation & JSXBase.HTMLAttributes<HTMLStellarDocumentationElement>;
      'stellar-dropdown': LocalJSX.StellarDropdown & JSXBase.HTMLAttributes<HTMLStellarDropdownElement>;
      'stellar-follow': LocalJSX.StellarFollow & JSXBase.HTMLAttributes<HTMLStellarFollowElement>;
      'stellar-form': LocalJSX.StellarForm & JSXBase.HTMLAttributes<HTMLStellarFormElement>;
      'stellar-grid': LocalJSX.StellarGrid & JSXBase.HTMLAttributes<HTMLStellarGridElement>;
      'stellar-group': LocalJSX.StellarGroup & JSXBase.HTMLAttributes<HTMLStellarGroupElement>;
      'stellar-group-overflow': LocalJSX.StellarGroupOverflow & JSXBase.HTMLAttributes<HTMLStellarGroupOverflowElement>;
      'stellar-icon': LocalJSX.StellarIcon & JSXBase.HTMLAttributes<HTMLStellarIconElement>;
      'stellar-image': LocalJSX.StellarImage & JSXBase.HTMLAttributes<HTMLStellarImageElement>;
      'stellar-input': LocalJSX.StellarInput & JSXBase.HTMLAttributes<HTMLStellarInputElement>;
      'stellar-intersection': LocalJSX.StellarIntersection & JSXBase.HTMLAttributes<HTMLStellarIntersectionElement>;
      'stellar-interview': LocalJSX.StellarInterview & JSXBase.HTMLAttributes<HTMLStellarInterviewElement>;
      'stellar-interview-line': LocalJSX.StellarInterviewLine & JSXBase.HTMLAttributes<HTMLStellarInterviewLineElement>;
      'stellar-item': LocalJSX.StellarItem & JSXBase.HTMLAttributes<HTMLStellarItemElement>;
      'stellar-keyframes': LocalJSX.StellarKeyframes & JSXBase.HTMLAttributes<HTMLStellarKeyframesElement>;
      'stellar-label': LocalJSX.StellarLabel & JSXBase.HTMLAttributes<HTMLStellarLabelElement>;
      'stellar-layout': LocalJSX.StellarLayout & JSXBase.HTMLAttributes<HTMLStellarLayoutElement>;
      'stellar-long-shadow': LocalJSX.StellarLongShadow & JSXBase.HTMLAttributes<HTMLStellarLongShadowElement>;
      'stellar-markdown': LocalJSX.StellarMarkdown & JSXBase.HTMLAttributes<HTMLStellarMarkdownElement>;
      'stellar-message': LocalJSX.StellarMessage & JSXBase.HTMLAttributes<HTMLStellarMessageElement>;
      'stellar-mouse-trail': LocalJSX.StellarMouseTrail & JSXBase.HTMLAttributes<HTMLStellarMouseTrailElement>;
      'stellar-pagination': LocalJSX.StellarPagination & JSXBase.HTMLAttributes<HTMLStellarPaginationElement>;
      'stellar-parallax': LocalJSX.StellarParallax & JSXBase.HTMLAttributes<HTMLStellarParallaxElement>;
      'stellar-parallax-section': LocalJSX.StellarParallaxSection & JSXBase.HTMLAttributes<HTMLStellarParallaxSectionElement>;
      'stellar-password-requirements': LocalJSX.StellarPasswordRequirements & JSXBase.HTMLAttributes<HTMLStellarPasswordRequirementsElement>;
      'stellar-pjax': LocalJSX.StellarPjax & JSXBase.HTMLAttributes<HTMLStellarPjaxElement>;
      'stellar-playlist': LocalJSX.StellarPlaylist & JSXBase.HTMLAttributes<HTMLStellarPlaylistElement>;
      'stellar-progress': LocalJSX.StellarProgress & JSXBase.HTMLAttributes<HTMLStellarProgressElement>;
      'stellar-reveal': LocalJSX.StellarReveal & JSXBase.HTMLAttributes<HTMLStellarRevealElement>;
      'stellar-reveal-list': LocalJSX.StellarRevealList & JSXBase.HTMLAttributes<HTMLStellarRevealListElement>;
      'stellar-scatter': LocalJSX.StellarScatter & JSXBase.HTMLAttributes<HTMLStellarScatterElement>;
      'stellar-scroll-z-root': LocalJSX.StellarScrollZRoot & JSXBase.HTMLAttributes<HTMLStellarScrollZRootElement>;
      'stellar-scroll-z-section': LocalJSX.StellarScrollZSection & JSXBase.HTMLAttributes<HTMLStellarScrollZSectionElement>;
      'stellar-select': LocalJSX.StellarSelect & JSXBase.HTMLAttributes<HTMLStellarSelectElement>;
      'stellar-simple-slides': LocalJSX.StellarSimpleSlides & JSXBase.HTMLAttributes<HTMLStellarSimpleSlidesElement>;
      'stellar-slide': LocalJSX.StellarSlide & JSXBase.HTMLAttributes<HTMLStellarSlideElement>;
      'stellar-slides': LocalJSX.StellarSlides & JSXBase.HTMLAttributes<HTMLStellarSlidesElement>;
      'stellar-song': LocalJSX.StellarSong & JSXBase.HTMLAttributes<HTMLStellarSongElement>;
      'stellar-starscape': LocalJSX.StellarStarscape & JSXBase.HTMLAttributes<HTMLStellarStarscapeElement>;
      'stellar-step': LocalJSX.StellarStep & JSXBase.HTMLAttributes<HTMLStellarStepElement>;
      'stellar-steps': LocalJSX.StellarSteps & JSXBase.HTMLAttributes<HTMLStellarStepsElement>;
      'stellar-story': LocalJSX.StellarStory & JSXBase.HTMLAttributes<HTMLStellarStoryElement>;
      'stellar-stripe': LocalJSX.StellarStripe & JSXBase.HTMLAttributes<HTMLStellarStripeElement>;
      'stellar-switch': LocalJSX.StellarSwitch & JSXBase.HTMLAttributes<HTMLStellarSwitchElement>;
      'stellar-tab': LocalJSX.StellarTab & JSXBase.HTMLAttributes<HTMLStellarTabElement>;
      'stellar-table': LocalJSX.StellarTable & JSXBase.HTMLAttributes<HTMLStellarTableElement>;
      'stellar-tabs': LocalJSX.StellarTabs & JSXBase.HTMLAttributes<HTMLStellarTabsElement>;
      'stellar-tag': LocalJSX.StellarTag & JSXBase.HTMLAttributes<HTMLStellarTagElement>;
      'stellar-tester': LocalJSX.StellarTester & JSXBase.HTMLAttributes<HTMLStellarTesterElement>;
      'stellar-theme': LocalJSX.StellarTheme & JSXBase.HTMLAttributes<HTMLStellarThemeElement>;
      'stellar-time': LocalJSX.StellarTime & JSXBase.HTMLAttributes<HTMLStellarTimeElement>;
      'stellar-toggle': LocalJSX.StellarToggle & JSXBase.HTMLAttributes<HTMLStellarToggleElement>;
      'stellar-toggle-option': LocalJSX.StellarToggleOption & JSXBase.HTMLAttributes<HTMLStellarToggleOptionElement>;
      'stellar-tooltip': LocalJSX.StellarTooltip & JSXBase.HTMLAttributes<HTMLStellarTooltipElement>;
      'stellar-unit': LocalJSX.StellarUnit & JSXBase.HTMLAttributes<HTMLStellarUnitElement>;
      'stellar-video': LocalJSX.StellarVideo & JSXBase.HTMLAttributes<HTMLStellarVideoElement>;
      'stellar-video-interview': LocalJSX.StellarVideoInterview & JSXBase.HTMLAttributes<HTMLStellarVideoInterviewElement>;
      'web-audio': LocalJSX.WebAudio & JSXBase.HTMLAttributes<HTMLWebAudioElement>;
      'web-audio-debugger': LocalJSX.WebAudioDebugger & JSXBase.HTMLAttributes<HTMLWebAudioDebuggerElement>;
      'web-audio-effect': LocalJSX.WebAudioEffect & JSXBase.HTMLAttributes<HTMLWebAudioEffectElement>;
      'web-audio-sequencer': LocalJSX.WebAudioSequencer & JSXBase.HTMLAttributes<HTMLWebAudioSequencerElement>;
      'web-audio-source': LocalJSX.WebAudioSource & JSXBase.HTMLAttributes<HTMLWebAudioSourceElement>;
      'web-audio-visualizer': LocalJSX.WebAudioVisualizer & JSXBase.HTMLAttributes<HTMLWebAudioVisualizerElement>;
      'web-audio-visualizer-shader': LocalJSX.WebAudioVisualizerShader & JSXBase.HTMLAttributes<HTMLWebAudioVisualizerShaderElement>;
    }
  }
}


